from typing import Callable


def evaluate_solution(graph: dict, solution: list) -> float:
    """
    Returns the total weight of the solution path.
    """
    total_weight = 0
    t = 0
    for i in range(len(solution) - 1):
        weight_func = graph[(solution[i], solution[i + 1])]
        weight_at_t = weight_func(t)
        total_weight += weight_at_t
        t += weight_at_t
    if len(solution) > 1:
        # Add the weight to return to the starting node
        weight_func = graph[(solution[-1], solution[0])]
        weight_at_t = weight_func(t)
        total_weight += weight_at_t
    return total_weight


def evaluate_strategy(graph: dict, strategy: Callable) -> float:
    """
    Returns the average weight of the solutions generated by the strategy.
    """
    solution = strategy(graph)
    return evaluate_solution(graph, solution)
